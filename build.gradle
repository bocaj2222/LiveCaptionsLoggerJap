plugins {
    id 'java'
    id 'application'
    id 'com.gradleup.shadow' version "$shadowPluginVersion"
}

import org.apache.tools.ant.filters.ReplaceTokens

group = 'net.brlns'
version = '1.1.1'

def author = 'Gabriel D @hstr0100'
def lowercaseName = 'livecaptionslogger'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }

    modularity.inferModulePath = false
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

application {
    mainClass = 'net.brlns.livecaptions.LiveCaptionsLogger'
    mainModule = 'net.brlns.livecaptions'
}

dependencies {
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "net.sourceforge.tess4j:tess4j:$tess4jVersion"
    implementation "org.apache.commons:commons-text:$commonsTextVersion"
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xlint:all,-serial,-processing,-requires-automatic']
}

jar {
    archiveBaseName.set("${lowercaseName}-java")

    manifest {
        attributes(
            'Implementation-Title': 'LiveCaptionsLogger',
            'Implementation-Version': version,
            'Implementation-Vendor': author,
            'Main-Class': application.mainClass.get()
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

shadowJar {
    archiveBaseName.set("${lowercaseName}-java")
    mergeServiceFiles()
}

//Replace java.exe with javaw.exe to disable console output
task replaceJavaExeInBatchFiles {
    doLast {
        def scriptsDir = file("${buildDir}/scriptsShadow")
        if (scriptsDir.exists()) {
            scriptsDir.eachFileMatch(~/.*\.bat/) { file ->
                def text = file.text
                text = text.replaceAll("java.exe", "javaw.exe")
                text = text.replaceAll("\"%JAVA_EXE%\" %", "start /b \"\" \"%JAVA_EXE%\" %")
                file.write(text)
            }
        }
    }
}

tasks.named('startShadowScripts') {
    finalizedBy(replaceJavaExeInBatchFiles)
}
